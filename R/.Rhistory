rnorm
rnorm(100,1)
Y <- rnorm(100,1)
X <- rnorm(100, 1000)
X <- as.matrix(rnorm(100*1000))
X <- as.matrix(rnorm(100*1000),nrow = 100, ncol = 1000)
dim(X)
X <- matrix(rnorm(100*1000),nrow = 100, ncol = 1000)
dim(X)
if(is.matrix(X)< 1){stop("x should be a matrix with 2 or more columns")}
dimX = dim(X)
if(is.null(dimX) | (dimX[2] <= 1)){stop("X should be a matrix style with 2 or more columns")}
if(is.matrix(Y)< 1){stop("Y should be a n by 1 matrix style")}
dimY = dim(Y)
if(dimX[1] != dimY[1]){stop("number of observations in Y is not equal to the number of rows of X")}
if((dimY[1]%%K) != 0 | K< 1){stop("K should be a natural number which divides the number of observations in Y without leaving a remainder")}
if(is.vector(Lambda1)< 1){stop("Lambda1 should be a vector style")}
if(is.vector(Lambda2)< 1){stop("Lambda1 should be a vector style")}
if(method != "profile" & method != "iteration"){stop("method should be either profile or iteration")}
if((Maxiter%%1) != 0 | Maxiter< 1){stop("Maxiter should be a natural number")}
Y <- t(rnorm(100,1))
if(is.matrix(X)< 1){stop("x should be a matrix with 2 or more columns")}
dimX = dim(X)
if(is.null(dimX) | (dimX[2] <= 1)){stop("X should be a matrix style with 2 or more columns")}
if(is.matrix(Y)< 1){stop("Y should be a n by 1 matrix style")}
dimY = dim(Y)
if(dimX[1] != dimY[1]){stop("number of observations in Y is not equal to the number of rows of X")}
Y <- matrix(rnorm(100,1),nrow = 100, ncol = 1)
X <- matrix(rnorm(100*1000),nrow = 100, ncol = 1000)
if(is.matrix(X)< 1){stop("x should be a matrix with 2 or more columns")}
dimX = dim(X)
if(is.null(dimX) | (dimX[2] <= 1)){stop("X should be a matrix style with 2 or more columns")}
if(is.matrix(Y)< 1){stop("Y should be a n by 1 matrix style")}
dimY = dim(Y)
if(dimX[1] != dimY[1]){stop("number of observations in Y is not equal to the number of rows of X")}
if((dimY[1]%%K) != 0 | K< 1){stop("K should be a natural number which divides the number of observations in Y without leaving a remainder")}
if(is.vector(Lambda1)< 1){stop("Lambda1 should be a vector style")}
if(is.vector(Lambda2)< 1){stop("Lambda1 should be a vector style")}
if(method != "profile" & method != "iteration"){stop("method should be either profile or iteration")}
if((Maxiter%%1) != 0 | Maxiter< 1){stop("Maxiter should be a natural number")}
Y <- matrix(rnorm(100,1),nrow = 100, ncol = 1)
X <- matrix(rnorm(100*1000),nrow = 100, ncol = 1000)
K <- 10
Lambda1 = 1
Lambda2 = 1
method = "iteration"
Maxiter=50
if(is.matrix(X)< 1){stop("x should be a matrix with 2 or more columns")}
dimX = dim(X)
if(is.null(dimX) | (dimX[2] <= 1)){stop("X should be a matrix style with 2 or more columns")}
if(is.matrix(Y)< 1){stop("Y should be a n by 1 matrix style")}
dimY = dim(Y)
if(dimX[1] != dimY[1]){stop("number of observations in Y is not equal to the number of rows of X")}
if((dimY[1]%%K) != 0 | K< 1){stop("K should be a natural number which divides the number of observations in Y without leaving a remainder")}
if(is.vector(Lambda1)< 1){stop("Lambda1 should be a vector style")}
if(is.vector(Lambda2)< 1){stop("Lambda1 should be a vector style")}
if(method != "profile" & method != "iteration"){stop("method should be either profile or iteration")}
if((Maxiter%%1) != 0 | Maxiter< 1){stop("Maxiter should be a natural number")}
n <- length(Y)
p <- length(X[1,])
Mitera <- Maxiter
Mitera
t(X)%*%X/n
t(X)%*%X
S=t(X)%*%X
dim(S)
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/delete.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
install.packages('RcppArmadillo')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
require('RcppArmadillo')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
install.packages('RcppArmadillo')
install.packages("RcppArmadillo")
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a19(X)
allequala19(X)
?isEqual
all.equal(allequala19(X), t(X)*X)
all.equal(a19(X), t(X)*X)
X
Y <- matrix(rnorm(100,1),nrow = 100, ncol = 1)
X <- matrix(rnorm(100*1000),nrow = 100, ncol = 1000)
K <- 10
Lambda1 = 1
Lambda2 = 1
method = "iteration"
Maxiter=50
all.equal(a19(X), t(X)*X)
all.equal(a19(X), t(X)%*%X)
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
all.equal(LavaLoop(X), t(X)%*%X)
all.equal(LavaLoop(X,y), t(X)%*%X)
all.equal(LavaLoop(X,Y), t(X)%*%X)
all.equal(LavaLoop(X,Y)$S, t(X)%*%X)
LavaLoop(X,Y)$S
all.equal(LavaLoop(X,Y)$S, t(X)%*%X)
all.equal(LavaLoop(X,Y)$S, t(X)%*%X/n)
temp_svd<-svd(X,nu=n,nv=p)
temp_svd
?svd
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
temp_svd
all.equal(LavaLoop(X,Y)$temp_svd, temp_svd)
LavaLoop(X,Y)
LavaLoop(X,Y)$temp_svd
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a22(X)
svd(X)
a22(X)
svd
La.svd
A=a22(X)
A
all.equal(A$U, temp_svd)
all.equal(A$s, temp_svd)
all.equal(A$V, temp_svd)
all.equal(A$U%*%diag(A$s)$A$V, temp_svd)
all.equal(A$U%*%diag(A$s)%*%A$V, temp_svd)
A$U%*%diag(A$s)%*%A$V
A$U%*%A$s%*%A$V
A$U
dim(A$U)
dim(temp_svd)
length(temp_svd)
temp_svd
temp_svd$d
LavaLoop(X,Y)
temp_svd$d
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
temp_svd$d
LavaLoop(X,Y)
a=LavaLoop(X,Y)
a$temp_svd
temp_svd
temp_svd$u
temp_svd$u
a$temp_svd
temp_svd$u
a$temp_svd
temp_svd$u
temp_svd$d
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
temp_svd$d
temp_svd$d
a=LavaLoop(X,Y)
a$temp_svd
a=LavaLoop(X,Y)
a$temp_svd
temp_svd$d
a$temp_svd
diag(temp_svd$d,n,p)
M<-diag(temp_svd$d,n,p)
dim(M)
n
p
?diag
M[1,1]
M[1,2]
M[2,2]
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
diag(temp_svd$d,n,p)
temp_svd$d
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
a$temp_svd
M<-diag(temp_svd$d,n,p)
dim(a$temp_svd)
dim(M)
a$temp_svd[1,1]
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
a=LavaLoop(X,Y)
a$temp_svd
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
a$temp_svd
a$temp_svd[1]
a$temp_svd[1,1]
a$temp_svd[2,2]
a$temp_svd[n,n]
a$temp_svd[n+1,n+1]
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
a$temp_svd[n+1,n+1]
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
a$temp_svd
dim(a$temp_svd)
a$temp_svd[n,n]
a$temp_svd[1,1]
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y)
dim(a$temp_svd)
a$temp_svd[1,1]
a$temp_svd[1,1000]
a$temp_svd[100,1000]
a$temp_svd[100,100]
a$temp_svd[100,100+1]
n
a$temp_svd[n+1,n+1]
a$temp_svd[n,n+1]
a$temp_svd[n-1,n-1]
elava_array<-array(dim=c(K,length(Lambda1),length(Lambda2)))
elava_array<-array(dim=c(K,length(Lambda1),length(Lambda2)))
elava_array
K
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X,Y, c(1,1,1), c(1,1,1))
a=LavaLoop(X,Y, c(1,1,1), c(1,1,1), 10)
a$temp_svd
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
k=1
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
Y
Y1
c(((k-1)*n/K+1):(k*n/K))
k=2
c(((k-1)*n/K+1):(k*n/K))
-c(((k-1)*n/K+1):(k*n/K))
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('~/GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
